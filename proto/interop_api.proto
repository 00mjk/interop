// Descriptors for Interop API.

syntax = "proto2";
package auvsi_suas.proto;

// Credentials used to login to interop.
message Credentials {
    // Username for login.
    // Required.
    optional string username = 1;
    // Password for login.
    // Required.
    optional string password = 2;
}

// Details for a mission.
message Mission {
    // Unique identifier for the mission.
    // Required.
    optional int32 id = 1;
    // Valid areas to fly. A team is out of bounds if not contained within.
    // Required. At least one FlyZone must be provided.
    repeated FlyZone fly_zones = 2;
    // Sequence of waypoints teams must fly.
    // Required. At least on Waypoint must be provided.
    repeated Position waypoints = 3;
    // Search grid containing ODLCs. Positions define a closed polygon.
    // Required. Will form a polygon, so at least 3 points must be provided.
    repeated Position search_grid_points = 4;
    // Position of the off-axis ODLC.
    // Required.
    optional Position off_axis_odlc_pos = 5;
    // Last known position of the emergent ODLC.
    // Required.
    optional Position emergent_last_known_pos = 6;
    // Position of the air drop location.
    // Required.
    optional Position air_drop_pos = 7;
}

// Valid area to fly. Defined by a polygon and two altitude bounds. A position
// is within the FlyZone if the position is within the polygon and within the
// altitude bounds. Teams must be within a FlyZone at all times.
message FlyZone {
    // Minimum altitude above mean sea level (MSL) in feet.
    // Required. [-1500, 330000]
    optional double altitude_min = 1;
    // Maximum altitude above mean sea level (MSL) in feet.
    // Required. [-1500, 330000]
    optional double altitude_max = 2;
    // Boundary points which define a closed polygon.
    // Required. Will form a polygon, so at least 3 points must be provided.
    repeated Position boundary_points = 3;
}

// Position of an entity.
message Position {
    // Latitude of GPS position in degrees.
    // Required. [-90, 90]
    optional double latitude = 1;
    // Longitude of GPS position in degrees.
    // Required. [-180, 180]
    optional double longitude = 2;
    // Altitude above mean sea level (MSL) in feet.
    // Optional. [-1500, 330000]
    optional double altitude = 3;
}

// UAS telemetry teams must upload.
message Telemetry {
    // Latitude of GPS position in degrees.
    // Required. [-90, 90]
    optional double latitude = 1;
    // Longitude of GPS position in degrees.
    // Required. [-180, 180]
    optional double longitude = 2;
    // Altitude above mean sea level (MSL) in feet.
    // Required. [-1500, 330000]
    optional double altitude = 3;
    // Heading relative to true north in degrees.
    // Required. [0, 360]
    optional double heading = 4;
}

// Set of obstacles returned for a given mission.
message ObstacleSet {
    // Stationary obstacles.
    repeated StationaryObstacle stationary_obstacles = 1;
}

// Stationary obstacle modeled as a cylinder.
message StationaryObstacle {
    // Latitude of GPS position in degrees.
    // Required. [-90, 90]
    optional double latitude = 1;
    // Longitude of GPS position in degrees.
    // Required. [-180, 180]
    optional double longitude = 2;
    // Radius of the obstacle cylinder in feet.
    // Required. [30, 300]
    optional double radius = 3;
    // Height of the obstacle cylinder above mean sea level (MSL) in feet.
    // Required. [-1500, 330000]
    optional double height = 4;
}
